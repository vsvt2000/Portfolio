[{"content":"","date":null,"permalink":"/tags/icons/","section":"Tags","summary":"","title":"icons"},{"content":"Congo has built-in support for a number of FontAwesome 6 icons. These can be included in your website through either the [icon partial] or [icon shortcode]\nAdditionally, custom icons are also fully supported. Simply provide your own SVG icon assets by placing them in the assets/icons/ directory in the root of your project. Any icons in the icons directory will then be available to use throughout the theme.\nThe full list of built-in icons and their corresponding names can referenced below.\nIcon name Preview amazon apple bars blogger bug check chevron-down chevron-up circle-info codepen coffee comment dev dribbble edit email facebook flickr foursquare github gitlab globe google google-scholar hashnode instagram keybase kickstarter lastfm lightbulb line link linkedin list mastodon medium mendeley microsoft mobile moon orcid patreon pencil phone pinterest reddit researchgate search skull-crossbones slack snapchat soundcloud stack-overflow steam sun tag telegram threads tiktok translate triangle-exclamation tumblr twitch twitter weibo whatsapp x-twitter xmark youtube ","date":"14 August 2020","permalink":"/blog/icons/","section":"Vishnu's blog","summary":"Congo has built-in support for a number of FontAwesome 6 icons.","title":"Icons"},{"content":"","date":null,"permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample"},{"content":"","date":null,"permalink":"/tags/shortcodes/","section":"Tags","summary":"","title":"shortcodes"},{"content":"These are the tags by which data is grouped by. I find it really cool, that I am able to offer this to people who visit the page.\nCongo has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\n","date":null,"permalink":"/tags/","section":"Tags","summary":"These are the tags by which data is grouped by.","title":"Tags"},{"content":"","date":null,"permalink":"/tags/users/","section":"Tags","summary":"","title":"users"},{"content":" Real websites that have been built using Congo. The list below is just a handful of the websites that are built using the Congo theme. Check them out to discover some great examples of what the theme can do.\nWebsite Details jamespanther.com Personal site - Theme author antoinesoetewey.com Personal site leif.io Personal site and Tech blog dr460nf1r3.org Personal site and Blog OCram85.com Personal site and Blog mackiser.github.io Personal site and Blog jamesmillner.dev Personal site and Blog jeremic.ca Personal site and Blog rohn.tech Personal site klimafreundlicher-kochen.de Food blog (in German) datanalyze.be Professional site sneaky-potato.github.io Professional site and Blog kelset.dev Personal site docteurelsavancaster.com Professional site ruihao-li.github.io Personal site and Blog phalanxhead.dev Personal site and Blog Bible Multi Apps Personal site and Blog Jh123x Personal site and Blog sforzando LLC. and Inc. Corporate site and Blog szegedkungfu.hu Sports association site cbrincoveanu.com Personal site and Blog medical-humanities Academic site boyersnet.com Personal site and Blog major.io Personal site and Blog È°æÂÆáÁöÑÂçöÂÆ¢ Personal Blog (in Chinese) cgutierr-zgz.github.io Personal site and Tech blog adam.sr Personal site and Blog kpavlov.me Personal site and Blog pfisterer.dev Personal site and Blog davidrothera.me Personal site and Blog sug.bitprism.net Personal Site and Blog arjuns.me Personal Site and Blog statistix.be Professional site sathyabh.at Personal Site and Blog leonidasv.com Personal site and Blog andrew-jones.com Personal site and tech blog nikita.computer Personal site and tech blog blog.dejavu.moe Personal blog and weekly issues spiffyeight77.com Personal blog Tomy\u0026rsquo;s Blog Personal site and Blog Beerjoa Blog Personal site and Blog simaosilva.com Personal Site kom.al Personal Site andrea.mortaro.it Personal Site and Blog yoganath.me Personal Site and Blog josh-v.com Personal Site and Tech blog rshmhrj.io Personal Site and Tech blog jamesjarvis.io Personal Site and Blog jnsgr.uk Personal site and blog stupidjoey.net Personal Site and Tech blog aminelch.github.io Personal Site and Blog robertboscacci.com Personal Site and Blog Congo user? To add your site to this list, submit a pull request.\n","date":null,"permalink":"/users/","section":"Welcome to Congo! üéâ","summary":"Real websites that have been built using Congo.","title":"Users"},{"content":" What you sow, so shall you reap. üòÑ This section contains reflections of my crazy, but iterative thought process. You can also look for content based on content tags.\nSidenote: This page is just a standard Congo article listing and Hugo has been configured to generate a samples content type and display article summaries.\n","date":null,"permalink":"/blog/","section":"Vishnu's blog","summary":"What you sow, so shall you reap.","title":"Vishnu's blog"},{"content":" A powerful, lightweight theme for Hugo built with Tailwind CSS. I am an SDE-1 currently working at Wiz(a part of Radar Ventures),Chennai.\nI am a full-stack developer, and I am also a data science enthusiast. I have been exploring a wide range of tools, and I encountered Congo. Congo is flexible and is great for both static page-based content (like this page) or a traditional blog with a feed of recent posts.Explore the sample pages to get a feel for what Congo can do. If you like what you see, check out the project on Github\n","date":null,"permalink":"/","section":"Welcome to Congo! üéâ","summary":"A powerful, lightweight theme for Hugo built with Tailwind CSS.","title":"Welcome to Congo! üéâ"},{"content":"","date":null,"permalink":"/tags/data-science/","section":"Tags","summary":"","title":"Data Science"},{"content":" Simple, yet powerful. Learn how to use Congo and its features. This section contains everything you need to know about Congo. If you\u0026rsquo;re new, check out the Installation guide to begin or visit the Samples section to see what Congo can do.\nSpecial thanks to Katerina Limpitsouni for the excellent illustrations that are used throughout these docs!\n","date":null,"permalink":"/projects/","section":"Documentation","summary":"Simple, yet powerful.","title":"Documentation"},{"content":"There are many ways you can make advanced changes to Congo. Read below to learn more about what can be customised and the best way of achieving your desired result.\nIf you need further advice, post your questions on GitHub Discussions.\nHugo project structure #Before leaping into it, first a quick note about Hugo project structure and best practices for managing your content and theme customisations.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project\u0026rsquo;s sub-directories, not in the themes directory itself. Congo is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overridden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Congo, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nColour schemes #Congo ships with a number of colour schemes out of the box. To change the basic colour scheme, you can set the colorScheme theme parameter. Refer to the [Getting Started] section to learn more about the built-in schemes.\nIn addition to the default schemes, you can also create your own and re-style the entire website to your liking. Schemes are created by by placing a \u0026lt;scheme-name\u0026gt;.css file in the assets/css/schemes/ folder. Once the file is created, simply refer to it by name in the theme configuration.\nCongo defines a three-colour palette that is used throughout the theme. The three colours are defined as neutral, primary and secondary variants, each containing ten shades of colour.\nDue to the way Tailwind CSS 3.0 calculates colour values with opacity, the colours specified in the scheme need to conform to a particular format by providing the red, green and blue colour values.\n:root { --color-primary-500: 139, 92, 246; } This example defines a CSS variable for the primary-500 colour with a red value of 139, green value of 92 and blue value of 246.\nUse one of the existing theme stylesheets as a template. You are free to define your own colours, but for some inspiration, check out the official Tailwind colour palette reference.\nOverriding the stylesheet #Sometimes you need to add a custom style to style your own HTML elements. Congo provides for this scenario by allowing you to override the default styles in your own CSS stylesheet. Simply create a custom.css file in your project\u0026rsquo;s assets/css/ folder.\nThe custom.css file will be minified by Hugo and loaded automatically after all the other theme styles which means anything in your custom file will take precedence over the defaults.\nAdjusting the font size #Changing the font size of your website is one example of overriding the default stylesheet. Congo makes this simple as it uses scaled font sizes throughout the theme which are derived from the base HTML font size. By default, Tailwind sets the default size to 12pt, but it can be changed to whatever value you prefer.\nCreate a custom.css file using the instructions above and add the following CSS declaration:\n/* Increase the default font size */ html { font-size: 13pt; } Simply by changing this one value, all the font sizes on your website will be adjusted to match this new size. Therefore, to increase the overall font sizes used, make the value greater than 12pt. Similarly, to decrease the font sizes, make the value less than 12pt.\nBuilding the theme CSS from source #If you\u0026rsquo;d like to make a major change, you can take advantage of Tailwind CSS\u0026rsquo;s JIT compiler and rebuild the entire theme CSS from scratch. This is useful if you want to adjust the Tailwind configuration or add extra Tailwind classes to the main stylesheet.\nNote: Building the theme manually is intended for advanced users. Let\u0026rsquo;s step through how building the Tailwind CSS works.\nTailwind configuration #In order to generate a CSS file that only contains the Tailwind classes that are actually being used the JIT compiler needs to scan through all the HTML templates and Markdown content files to check which styles are present in the markup. The compiler does this by looking at the tailwind.config.js file which is included in the root of the theme directory:\n// themes/congo/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/congo/layouts/**/*.html\u0026#34;, \u0026#34;./themes/congo/content/**/*.{html,md}\u0026#34;, ], // and more... }; This default configuration has been included with these content paths so that you can easily generate your own CSS file without needing to modify it, provided you follow a particular project structure. Namely, you have to include Congo in your project as a subdirectory at themes/congo/. This means you cannot easily use Hugo Modules to install the theme and you must go down either the git submodule (recommended) or manual install routes. The [Installation docs]explain how to install the theme using either of these methods.\nProject structure #In order to take advantage of the default configuration, your project should look something like this\u0026hellip;\n. ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ css ‚îÇ ‚îî‚îÄ‚îÄ compiled ‚îÇ ‚îî‚îÄ‚îÄ main.css # this is the file we will generate ‚îú‚îÄ‚îÄ config # site config ‚îÇ ‚îî‚îÄ‚îÄ _default ‚îú‚îÄ‚îÄ content # site content ‚îÇ ‚îú‚îÄ‚îÄ _index.md ‚îÇ ‚îú‚îÄ‚îÄ projects ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ _index.md ‚îÇ ‚îî‚îÄ‚îÄ blog ‚îÇ ‚îî‚îÄ‚îÄ _index.md ‚îú‚îÄ‚îÄ layouts # custom layouts for your site ‚îÇ ‚îú‚îÄ‚îÄ partials ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ extend-article-link.html ‚îÇ ‚îú‚îÄ‚îÄ projects ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ list.html ‚îÇ ‚îî‚îÄ‚îÄ shortcodes ‚îÇ ‚îî‚îÄ‚îÄ disclaimer.html ‚îî‚îÄ‚îÄ themes ‚îî‚îÄ‚îÄ congo # git submodule or manual theme install This example structure adds a new projects content type with its own custom layout along with a custom shortcode and extended partial. Provided the project follows this structure, all that\u0026rsquo;s required is to recompile the main.css file.\nInstall dependencies #In order for this to work you\u0026rsquo;ll need to change into the themes/congo/ directory and install the project dependencies. You\u0026rsquo;ll need npm on your local machine for this step.\ncd themes/congo npm install Run the Tailwind compiler #With the dependencies installed all that\u0026rsquo;s left is to use Tailwind CLI to invoke the JIT compiler. Navigate back to the root of your Hugo project and issue the following command:\ncd ../.. ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit It\u0026rsquo;s a bit of an ugly command due to the paths involved but essentially you\u0026rsquo;re calling Tailwind CLI and passing it the location of the Tailwind config file (the one we looked at above), where to find the theme\u0026rsquo;s main.css file and then where you want the compiled CSS file to be placed (it\u0026rsquo;s going into the assets/css/compiled/ folder of your Hugo project).\nThe config file will automatically inspect all the content and layouts in your project as well as all those in the theme and build a new CSS file that contains all the CSS required for your website. Due to the way Hugo handles file hierarchy, this file in your project will now automatically override the one that comes with the theme.\nEach time you make a change to your layouts and need new Tailwind CSS styles, you can simply re-run the command and generate the new CSS file. You can also add -w to the end of the command to run the JIT compiler in watch mode.\nMake a build script #To fully complete this solution, you can simplify this whole process by adding aliases for these commands, or do what I do and add a package.json to the root of your project which contains the necessary scripts\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/congo/node_modules/tailwindcss/lib/cli.js -c ./themes/congo/tailwind.config.js -i ./themes/congo/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } Now when you want to work on designing your site, you can invoke npm run dev and the compiler will run in watch mode. When you\u0026rsquo;re ready to deploy, run npm run build and you\u0026rsquo;ll get a clean Tailwind CSS build.\nüôã‚Äç‚ôÄÔ∏è If you need help, feel free to ask a question on GitHub Discussions.\n","date":null,"permalink":"/projects/advanced-customisation/","section":"Documentation","summary":"My final year project, whose results were published in IEEE.","title":"Ed-Eu-Helper"},{"content":"","date":null,"permalink":"/tags/ieee/","section":"Tags","summary":"","title":"IEEE"},{"content":"","date":null,"permalink":"/tags/obe/","section":"Tags","summary":"","title":"OBE"},{"content":"","date":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":null,"permalink":"/tags/software-engineering/","section":"Tags","summary":"","title":"Software Engineering"},{"content":"","date":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"css"},{"content":"","date":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"html"},{"content":"","date":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"markdown"},{"content":"This article offers a sample of basic Markdown formatting that can be used in Congo, also it shows how some basic HTML elements are decorated.\nHeadings #The following HTML \u0026lt;h1\u0026gt;‚Äî\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 #H2 #H3 #H4 #H5 #H6 #Paragraph #Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes #The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables #Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables # Italics Bold Code italics bold code Code Blocks #Code block with backticks #\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces #\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types #Ordered List # First item Second item Third item Unordered List # List item Another item And another item Nested list # Fruit Apple Orange Banana Dairy Milk Cheese Other Elements ‚Äî abbr, sub, sup, kbd, mark #GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk about nothing during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"11 March 2019","permalink":"/blog/markdown/","section":"Vishnu's blog","summary":"\u003cp\u003eThis article offers a sample of basic Markdown formatting that can be used in Congo, also it shows how some basic HTML elements are decorated.\u003c/p\u003e","title":"Markdown"},{"content":"","date":null,"permalink":"/tags/gist/","section":"Tags","summary":"","title":"gist"},{"content":"","date":null,"permalink":"/tags/privacy/","section":"Tags","summary":"","title":"privacy"},{"content":"Hugo ships with several built-in shortcodes for rich content, along with a privacy config and a set of simple shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube #Below is an example using the built-in youtube shortcode.\nTwitter #This example uses the twitter_simple shortcode to output a Tweet. It requires two named parameters user and id.\n‚ÄúIn addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.‚Äù\n‚Äî Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Alternatively, the tweet shortcode can be used to embed a fully marked up Twitter card.\nGist #The gist shortcode can be used to embed a GitHub Gist. It requires two unnamed parameters: the username and ID of the Gist.\nVimeo #The vimeo_simple shortcode will embed a Vimeo video.\n","date":"10 March 2019","permalink":"/blog/rich-content/","section":"Vishnu's blog","summary":"This is an \u003cem\u003eexample\u003c/em\u003e of a \u003cstrong\u003erich\u003c/strong\u003e content summary.","title":"Rich Content"},{"content":"","date":null,"permalink":"/tags/twitter/","section":"Tags","summary":"","title":"twitter"},{"content":"","date":null,"permalink":"/tags/vimeo/","section":"Tags","summary":"","title":"vimeo"},{"content":"","date":null,"permalink":"/tags/youtube/","section":"Tags","summary":"","title":"youtube"},{"content":"","date":null,"permalink":"/tags/katex/","section":"Tags","summary":"","title":"katex"},{"content":"KaTeX can be used to render mathematical notation within articles.\nCongo will only bundle the KaTeX assets into your project if you make use of mathematical notation. In order for this to work, simply include the [katex shortcode]within the article. Any KaTeX syntax on that page will then be automatically rendered.\nUse the online reference of supported TeX functions for the available syntax.\nInline notation #Inline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters.\nExample:\n% KaTeX inline notation Inline notation: \\\\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶\\\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶\\)\nBlock notation #Alternatively, block notation can be generated using $$ delimiters. This will output the expression in its own HTML block.\nExample:\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"8 March 2019","permalink":"/blog/mathematical-notation/","section":"Vishnu's blog","summary":"\u003cp\u003eKaTeX can be used to render mathematical notation within articles.\u003c/p\u003e","title":"Mathematical notation"},{"content":"","date":null,"permalink":"/tags/maths/","section":"Tags","summary":"","title":"maths"},{"content":"","date":null,"permalink":"/tags/chart/","section":"Tags","summary":"","title":"chart"},{"content":"Congo includes support for Chart.js using the chart shortcode. Simply wrap the chart markup within the shortcode. Congo automatically themes charts to match the configured colorScheme parameter, however the colours can be customised using normal Chart.js syntax.\nRefer to the [chart shortcode] docs for more details.\nThe examples below are a small selection taken from the official Chart.js docs. You can also view the page source on GitHub to see the markup.\nBar chart # Line chart # Doughnut chart # ","date":"6 March 2019","permalink":"/blog/charts/","section":"Vishnu's blog","summary":"Congo includes Chart.js for powerful charts and data visualisations.","title":"Charts"},{"content":"","date":null,"permalink":"/tags/diagram/","section":"Tags","summary":"","title":"diagram"},{"content":"Mermaid diagrams are supported in Congo using the mermaid shortcode. Simply wrap the diagram markup within the shortcode. Congo automatically themes Mermaid diagrams to match the configured colorScheme parameter.\nRefer to the [mermaid shortcode] docs for more details.\nThe examples below are a small selection taken from the official Mermaid docs. You can also view the page source on GitHub to see the markup.\nFlowchart # graph TD A[Christmas] --\u003e|Get money| B(Go shopping) B --\u003e C{Let me think} B --\u003e G[/Another/] C ==\u003e|One| D[Laptop] C --\u003e|Two| E[iPhone] C --\u003e|Three| F[Car] subgraph Section C D E F G end Sequence diagram # sequenceDiagram autonumber par Action 1 Alice-\u003e\u003eJohn: Hello John, how are you? and Action 2 Alice-\u003e\u003eBob: Hello Bob, how are you? end Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u003e\u003e-Alice: I feel great! loop Every minute John--\u003eAlice: Great! end Class diagram # classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Entity relationship diagram # erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ","date":"6 March 2019","permalink":"/blog/diagrams-flowcharts/","section":"Vishnu's blog","summary":"It\u0026rsquo;s easy to add diagrams and flowcharts to articles using Mermaid.","title":"Diagrams and Flowcharts"},{"content":"","date":null,"permalink":"/tags/graph/","section":"Tags","summary":"","title":"graph"},{"content":"","date":null,"permalink":"/tags/mermaid/","section":"Tags","summary":"","title":"mermaid"},{"content":"","date":null,"permalink":"/tags/emoji/","section":"Tags","summary":"","title":"emoji"},{"content":"Emoji is supported throughout Congo by default. Emoji can be used in titles, menu items and article content.\nNote: The rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack. Emoji replacements are automatic throughout Congo, so you can use shorthand codes in your content and front matter and they will be converted to their corresponding symbols at build time.\nExample: see_no_evil üôà, hear_no_evil üôâ, speak_no_evil üôä.\nEmojipedia is a useful reference for emoji shorthand codes.\n","date":"5 March 2019","permalink":"/blog/emoji/","section":"Vishnu's blog","summary":"üìñüèûÔ∏èüßóüèΩüêâüßôüèΩ‚Äç‚ôÇÔ∏èüßöüèΩüë∏","title":"Emoji ü™Ç"}]